---
- hosts: localhost
  connection: local
  gather_facts: true

  vars_files:
    - Ansible_Files/vault_vars.yml

  vars:
    version: "2.0"

    development: no #do a developers install instead of building containers

    # Directory paths
    base_dir: "{{ working_directory }}"
    docker_volume_path: "{{ ansible_env.HOME }}/volumes/rf"

    # File paths
    pyproject_toml_path: "{{ base_dir }}/pyproject.toml"
    env_file_path: "{{ base_dir }}/docker/.env"
    conf_json_path: "{{ base_dir }}/web/src/conf.json"
    log_file: "{{ base_dir }}/ansible_build.log"

    # Configuration values
    service_name: "ragflow"
    new_image_name: "infiniflow/ragflow:nightly"
    docker_mac_repo_branch: "main"
    ragflow_repo_branch: "main" #This is the ragflow repo or fork branch you should clone

    # File content replacements
    xgboost_replacements:
      old: "xgboost==1.5.0"
      new: "xgboost==1.6.0"

    env_file_changes:
      macos:
        old: "# MACOS=1"
        new: "MACOS=1"
      timezone:
        old: "TIMEZONE='Asia/Shanghai'"
        new: "TIMEZONE='America/Denver'"
      lighten: "LIGHTEN=0"
      volume_dir: "DOCKER_VOLUME_DIRECTORY={{ docker_volume_path }}"

    # External resources
    dockerfile_mac_repo:
      url: "https://github.com/electricramblers/Dockerfile.mac.git"
      dest: "{{ base_dir }}/dockerfile_mac_repo"

  tasks:
    # Validation checks
    - name: Ensure running on macOS
      fail:
        msg: "This playbook should only be run on macOS."
      when: ansible_os_family != "Darwin"

    - name: Ensure running from the 'ragflow' directory
      block:
        - name: Set base_dir if running from the 'ragflow' directory
          set_fact:
            base_dir: "{{ playbook_dir }}"
          when: playbook_dir | basename == "ragflow"
          tags: [compose, clone, rebuild]

        - name: Verify correct directory
          fail:
            msg: "The playbook must be run from within the 'ragflow' directory."
          when: base_dir | basename != "ragflow"
      tags: [always]

    # Dependencies installation
    - name: Install required Python packages
      ansible.builtin.pip:
        name: "{{ item }}"
      loop:
        - pyyaml
        - huggingface_hub
        - nltk
      tags: [always]

    # Container engine detection
    - name: Determine container engine (docker or podman)
      block:
        - name: Check for podman
          command: which podman
          register: podman_check
          ignore_errors: true
          changed_when: false

        - name: Check for docker
          command: which docker
          register: docker_check
          ignore_errors: true
          changed_when: false

        - name: Set container engine based on availability
          set_fact:
            container_engine: >-
              {% if podman_check.rc == 0 %}podman{% elif docker_check.rc == 0 %}docker{% endif %}
            build_format_option: "{{ '--format docker' if podman_check.rc == 0 else '' }}"

        - name: Fail if no container engine is found
          fail:
            msg: "No container engine found. Please install docker or podman and try again."
          when: podman_check.rc != 0 and docker_check.rc != 0
      rescue:
        - name: Display error message
          debug:
            msg: "An error occurred while determining the container engine."
          failed_when: true
      tags: [compose, configure, rebuild, takedown]

    # Handle container cleanup for rebuild
    - name: Stop and remove ragflow-server container if rebuilding
      command: "{{ container_engine }} rm -f ragflow-server"
      ignore_errors: true
      changed_when: false
      when: "'rebuild' in ansible_run_tags"
      tags: [rebuild]

    - name: Clone the RagFlow repository to the working directory.
      ansible.builtin.git:
        repo: "{{ ragflow_repo }}"
        dest: "{{ working_directory }}"
        update: yes
        version: "{{ ragflow_repo_branch }}"

    # File modifications
    - name: Update configuration files
      block:
        # pyproject.toml modifications
        - name: Backup pyproject.toml
          ansible.builtin.copy:
            src: "{{ pyproject_toml_path }}"
            dest: "{{ pyproject_toml_path }}.bak"
            remote_src: yes

        - name: Update xgboost version in pyproject.toml
          ansible.builtin.replace:
            path: "{{ pyproject_toml_path }}"
            regexp: "{{ xgboost_replacements.old }}"
            replace: "{{ xgboost_replacements.new }}"
          register: pyproject_toml_result

        - name: Report changes to pyproject.toml
          ansible.builtin.debug:
            msg: "Updated xgboost version in {{ pyproject_toml_path }}"
          when: pyproject_toml_result is changed

        # .env file modifications
        - name: Backup .env file
          ansible.builtin.copy:
            src: "{{ env_file_path }}"
            dest: "{{ env_file_path }}.bak"
            remote_src: yes

        - name: Set time zone in environment file
          ansible.builtin.replace:
            path: "{{ env_file_path }}"
            regexp: "{{ env_file_changes.timezone.old }}"
            replace: "{{ env_file_changes.timezone.new }}"
          register: time_zone_result

        - name: Enable MacOS mode in environment file
          ansible.builtin.replace:
            path: "{{ env_file_path }}"
            regexp: "{{ env_file_changes.macos.old }}"
            replace: "{{ env_file_changes.macos.new }}"
          register: env_file_result

        - name: Add LIGHTEN=0 to environment file
          ansible.builtin.lineinfile:
            path: "{{ env_file_path }}"
            line: "{{ env_file_changes.lighten }}"
            insertafter: EOF
          register: lighten_result

        - name: Add DOCKER_VOLUME_DIRECTORY to environment file
          ansible.builtin.lineinfile:
            path: "{{ env_file_path }}"
            line: "{{ env_file_changes.volume_dir }}"
            insertafter: EOF
          register: volume_result

        - name: Report changes to environment file
          ansible.builtin.debug:
            msg: "{{ item.msg }}"
          loop:
            - { msg: "Enabled MacOS mode in {{ env_file_path }}", condition: "{{ env_file_result is changed }}" }
            - { msg: "Added {{ env_file_changes.lighten }} to {{ env_file_path }}", condition: "{{ lighten_result is changed }}" }
            - { msg: "Set timezone to {{ env_file_changes.timezone.new }}", condition: "{{ time_zone_result is changed }}" }
            - { msg: "Set volume directory to {{ docker_volume_path }}", condition: "{{ volume_result is changed }}" }
          when: item.condition | bool
      tags: [always]

    # Download dependencies
    - name: Prepare dependencies
      block:
        - name: Download dependencies
          command: python download_deps.py
          args:
            chdir: "{{ base_dir }}"

        - name: Build dependencies image
          command: "{{ container_engine }} build -f Dockerfile.deps -t infiniflow/ragflow_deps {{ build_format_option }} ."
          args:
            chdir: "{{ base_dir }}"
          register: deps_build_result
          ignore_errors: true

        - name: Save dependencies build output to log file
          copy:
            content: "{{ deps_build_result.stdout + '\n' + deps_build_result.stderr }}"
            dest: "{{ log_file }}"
          when: deps_build_result.rc != 0 or deps_build_result.stdout != "" or deps_build_result.stderr != ""
      tags: [always]

    # Repository handling
    - name: Setup from repository
      block:
        - name: Clone repository
          ansible.builtin.git:
            repo: "{{ dockerfile_mac_repo.url }}"
            dest: "{{ dockerfile_mac_repo.dest }}"
            version: "{{ docker_mac_repo_branch }}"
            force: yes

        - name: Update conf.json with new app name
          ansible.builtin.copy:
            content: |
              {
                "appName": "{{ set_new_name }}"
              }
            dest: "{{ conf_json_path }}"
          when:
            - set_new_name is defined
          register: conf_json_result

        - name: Report conf.json modification
          ansible.builtin.debug:
            msg: "Successfully updated conf.json to change appName."
          when: conf_json_result is changed

        - name: Warn if conf.json doesn't exist
          ansible.builtin.debug:
            msg: "WARNING: conf.json file not found at {{ conf_json_path }}. Skipping modification."
          when: not stat_results.results[2].stat.exists

        # Copy logo files
        - name: Copy logo files
          ansible.builtin.copy:
            src: "{{ dockerfile_mac_repo.dest }}/Images/bannerlogo.svg"
            dest: "{{ item }}"
            remote_src: no
            decrypt: yes
          loop:
            - "{{ base_dir }}/intergrations/extension_chrome/assets/logo.svg"
            - "{{ base_dir }}/web/public/logo.svg"

        # Copy configuration files
        - name: Copy configuration files
          ansible.builtin.copy:
            src: "{{ dockerfile_mac_repo.dest }}/RF_Files/{{ item.src }}"
            dest: "{{ base_dir }}/{{ item.dest }}"
            remote_src: no
            decrypt: yes
          loop:
            - { src: "Dockerfile.mac", dest: "Dockerfile.mac" }
            - { src: "docker-compose-mac.yml", dest: "docker/docker-compose-mac.yml" }
            - { src: "service_conf.yaml.template", dest: "docker/service_conf.yaml.template" }

        # Clean up
        - name: Clean up the cloned repository
          ansible.builtin.file:
            path: "{{ dockerfile_mac_repo.dest }}"
            state: absent
      tags: [clone, configure, rebuild]

    # Build image
    - name: Build Ragflow image for MacOS
      command: "{{ container_engine }} build -f Dockerfile.mac -t {{ new_image_name }} {{ build_format_option }} ."
      args:
        chdir: "{{ base_dir }}"
      register: mac_build_result
      ignore_errors: true
      when: not development
      tags: [rebuild]

    - name: Save build output to log file
      copy:
        content: "{{ mac_build_result.stdout + '\n' + mac_build_result.stderr }}"
        dest: "{{ log_file }}"
        when: mac_build_result.rc != 0 or mac_build_result.stdout != "" or mac_build_result.stderr != "" and development == 'no'
      tags: [rebuild]

    # Takedown tasks
    - name: Perform takedown if requested
      block:
        - name: Stop and remove containers
          command: "{{ container_engine }} compose -f {{ base_dir }}/docker/docker-compose-mac.yml down"
          args:
            chdir: "{{ base_dir }}"

        - name: Prune container system
          command: "{{ container_engine }} system prune -af"

        - name: Takedown complete message
          debug:
            msg: "RagFlow containers have been stopped and removed. System has been pruned."
      when: "'takedown' in ansible_run_tags"
      tags: [takedown]

    # Compose up task
    - name: Start containers if not taking down
      block:
        - name: Compose up
          command: "{{ container_engine }} compose -f {{ base_dir }}/docker/docker-compose-mac.yml up -d"
          args:
            chdir: "{{ base_dir }}"

        - name: Final success message
          debug:
            msg: "RagFlow has been successfully installed and started on your MacOS system. Access the web UI at http://localhost"
      when: "'takedown' not in ansible_run_tags and not development"
      tags: [compose, configure, rebuild]
