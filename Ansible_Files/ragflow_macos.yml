---
- hosts: localhost
  connection: local
  gather_facts: true

  vars:
    base_dir: "{{ playbook_dir }}" # default to playbook directory, override if necessary
    pyproject_toml_path: "{{ base_dir }}/pyproject.toml"
    env_file_path: "{{ base_dir }}/docker/.env"
    service_name: "ragflow"
    new_image_name: "infiniflow/ragflow:nightly"
    old_xgboost_line: "xgboost==1.5.0"
    new_xgboost_line: "xgboost==1.6.0"
    old_line: "# MACOS=1"
    new_line: "MACOS=1"
    lighten_line: "LIGHTEN=0"
    original_time_zone: "TIMEZONE='Asia/Shanghai'"
    new_time_zone: "TIMEZONE=America/Denver"
    dockerfile_mac_url: "https://github.com/electricramblers/Dockerfile.mac.git"
    dockerfile_mac_dest: "{{ base_dir }}/Dockerfile.mac"
    docker_volume_path: "{{ ansible_env.HOME }}/volumes/rf"
    env_volume_line: "DOCKER_VOLUME_DIRECTORY={{ docker_volume_path }}"
    log_file: "{{ base_dir }}/ansible_build.log"

  tasks:
    - name: Check if running on macOS
      fail:
        msg: "This playbook should only be run on macOS."
      when: ansible_os_family != "Darwin"

    - name: Set BASE_DIR if running from the 'ragflow' directory
      set_fact:
        base_dir: "{{ playbook_dir }}"
      when: playbook_dir | basename == "ragflow"
      tags:
        - compose
        - clone
        - rebuild

    - name: Check if running from the 'ragflow' directory
      fail:
        msg: "The playbook is not being run from the 'ragflow' directory.\nYou need to run the playbook from within the 'ragflow' directory."
      when: base_dir | basename != "ragflow"

    - name: Install pyyaml
      pip:
        name: pyyaml
      register: yaml_install_result

    - name: Determine container engine
      block:
        - name: Check if podman is available
          command: which podman
          register: podman_check
          ignore_errors: true
          changed_when: false
        - name: Check if docker is available
          command: which docker
          register: docker_check
          ignore_errors: true
          changed_when: false
        - name: Set container engine to podman if both are available
          set_fact:
            container_engine: "podman"
          when: podman_check.rc == 0 and docker_check.rc == 0
        - name: Set container engine to podman if only podman is available
          set_fact:
            container_engine: "podman"
          when: podman_check.rc == 0 and docker_check.rc != 0
        - name: Set container engine to docker if only docker is available
          set_fact:
            container_engine: "docker"
          when: podman_check.rc != 0 and docker_check.rc == 0
        - name: Fail if no container engine is found
          fail:
            msg: "No container engine found. Please install docker or podman and try again."
          when: podman_check.rc != 0 and docker_check.rc != 0
      rescue:
        - name: Display error message
          debug:
            msg: "An error occurred while determining the container engine."
          failed_when: true
      tags:
        - compose
        - configure
        - rebuild
        - takedown

    - name: Backup pyproject.toml
      command: cp "{{ pyproject_toml_path }}" "{{ pyproject_toml_path }}.bak"
    - name: Update xgboost version in pyproject.toml
      replace:
        path: "{{ pyproject_toml_path }}"
        regexp: "{{ old_xgboost_line }}"
        replace: "{{ new_xgboost_line }}"
      when:
        - ansible_os_family == "Darwin"
        - pyproject_toml_path is defined
        - old_xgboost_line is defined
        - new_xgboost_line is defined
      register: pyproject_toml_result
      check_mode: no

    - name: Report changes to pyproject.toml
      debug:
        msg: "Updated xgboost version in {{ pyproject_toml_path }}"
      when: pyproject_toml_result is changed

    - name: Backup .env file
      command: cp "{{ env_file_path }}" "{{ env_file_path }}.bak"

    - name: Set time zone in environment file
      replace:
        path: "{{ env_file_path }}"
        regexp: "{{ original_time_zone }}"
        replace: "{{ new_time_zone }}"
      when:
        - ansible_os_family == "Darwin"
        - env_file_path is defined
        - old_line is defined
        - new_line is defined
      register: time_zone_result
      check_mode: no

    - name: Enable MacOS mode in environment file
      replace:
        path: "{{ env_file_path }}"
        regexp: "{{ old_line }}"
        replace: "{{ new_line }}"
      when:
        - ansible_os_family == "Darwin"
        - env_file_path is defined
        - old_line is defined
        - new_line is defined
      register: env_file_result
      check_mode: no

    - name: Add LIGHTEN=0 to environment file
      lineinfile:
        path: "{{ env_file_path }}"
        line: "{{ lighten_line }}"
        insertafter: EOF
      when:
        - ansible_os_family == "Darwin"
        - env_file_path is defined
        - lighten_line is defined
      register: lighten_result
      check_mode: no

    - name: Add DOCKER_VOLUME_DIRECTORY to environment file
      lineinfile:
        path: "{{ env_file_path }}"
        line: "{{ env_volume_line }}"
        insertafter: EOF
      when:
        - ansible_os_family == "Darwin"
        - env_file_path is defined
        - env_volume_line is defined
      register: volume_result
      check_mode: no

    - name: Report changes to environment file for MACOS setting
      debug:
        msg: "Enabled MacOS mode in {{ env_file_path }}"
      when: env_file_result is changed

    - name: Report changes to environment file for LIGHTEN setting
      debug:
        msg: "Added {{ lighten_line }} to {{ env_file_path }}"
      when: lighten_result is changed

    - name: Change working directory
      changed_when: false
      command: pwd
      register: pwd_result

    - name: Set fact that we are in the correct directory
      changed_when: false
      set_fact:
        current_directory_is_correct: "{{ pwd_result.stdout == base_dir }}"
      when:
        - ansible_os_family == "Darwin"
        - base_dir is defined
        - pwd_result is defined

    - name: Change directory to base_dir
      command: chdir "{{ base_dir }}"
      args:
        chdir: "{{ base_dir }}"
      when: not current_directory_is_correct

    - name: Install huggingface_hub and nltk
      pip:
        name: "{{ item }}"
      loop:
        - huggingface_hub
        - nltk

    - name: Download dependencies
      command: python download_deps.py
      args:
        chdir: "{{ base_dir }}"

    - name: Build dependencies image
      command: "{{ container_engine }} build -f Dockerfile.deps -t infiniflow/ragflow_deps {{ '--format docker' if container_engine == 'podman' else '' }} . > {{ log_file }} 2>&1"
      args:
        chdir: "{{ base_dir }}"
      register: deps_build_result
      ignore_errors: true

    #-------------------------------------------------------------------------------
    # Repo  Stuff
    #-------------------------------------------------------------------------------

    - name: Ensure repository is cloned
      git:
        repo: "{{ dockerfile_mac_url }}"
        dest: "{{ base_dir }}/dockerfile_mac_repo"
        version: main # or the relevant branch
        force: yes
      tags:
        - clone
        - configure
        - rebuild

    - name: Copy Dockerfile.mac to the desired location
      copy:
        src: "{{ base_dir }}/dockerfile_mac_repo/RF_Files/Dockerfile.mac"
        dest: "{{ base_dir }}/Dockerfile.mac"
        remote_src: yes
      tags:
        - clone
        - rebuild

    - name: Copy docker-compose-mac.yml to the desired location
      copy:
        src: "{{ base_dir }}/dockerfile_mac_repo/RF_Files/docker-compose-mac.yml"
        dest: "{{ base_dir }}/docker/docker-compose-mac.yml"
        remote_src: yes
      tags:
        - clone
        - configure
        - rebuild
    - name: Copy the service_conf.yaml.template to the desired location.
      copy:
        src: "{{ base_dir }}/dockerfile_mac_repo/RF_Files/service_conf.yaml.template"
        dest: "{{ base_dir }}/docker/service_conf.yaml.template"
        decrypt: yes
      when:
        - lookup('env', 'ANSIBLE_VAULT_PASSWORD_FILE') != ''
      tags:
        - clone
        - configure
        - rebuild

    - name: Clean up the cloned repository
      file:
        path: "{{ base_dir }}/dockerfile_mac_repo"
        state: absent
      tags:
        - clone
        - configure
        - rebuild

    - name: Build Ragflow image for MacOS
      command: "{{ container_engine }} build -f Dockerfile.mac -t infiniflow/ragflow:nightly {{ '--format docker' if container_engine == 'podman' else '' }} . > {{ log_file }} 2>&1"
      args:
        chdir: "{{ base_dir }}"
      register: mac_build_result
      ignore_errors: true
      tags:
        - rebuild

    # Takedown tasks - only run when takedown tag is specified
    - name: Stop and remove containers
      command: "{{ container_engine }} compose -f {{ base_dir }}/docker/docker-compose-mac.yml down"
      args:
        chdir: "{{ base_dir }}"
      when: "'takedown' in ansible_run_tags"
      tags:
        - takedown

    - name: Prune container system
      command: "{{ container_engine }} system prune -af"
      when: "'takedown' in ansible_run_tags"
      tags:
        - takedown

    - name: Takedown complete message
      debug:
        msg: "RagFlow containers have been stopped and removed. System has been pruned."
      when: "'takedown' in ansible_run_tags"
      tags:
        - takedown

    # Compose up task - only run when takedown tag is NOT specified
    - name: Compose up - TOTAL
      command: "{{ container_engine }} compose -f {{ base_dir }}/docker/docker-compose-mac.yml up -d"
      args:
        chdir: "{{ base_dir }}"
      when: "'takedown' not in ansible_run_tags"
      tags:
        - compose
        - configure
        - rebuild

    - name: Final message
      debug:
        msg: "RagFlow has been successfully installed and started on your MacOS system. Access the web UI at http://localhost"
      when: "'takedown' not in ansible_run_tags"
      tags:
        - compose
        - configure
        - rebuild
